{"name": "test_inventory[standard_user-secret_sauce]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementnotinteractableexception\nStacktrace:\n0   chromedriver                        0x0000000103463274 cxxbridge1$str$ptr + 2882596\n1   chromedriver                        0x000000010345b1a0 cxxbridge1$str$ptr + 2849616\n2   chromedriver                        0x0000000102f84ff4 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 73024\n3   chromedriver                        0x0000000102fc7104 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 343632\n4   chromedriver                        0x0000000102fc5b44 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 338064\n5   chromedriver                        0x0000000102fc1d68 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 322228\n6   chromedriver                        0x000000010300d6c8 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 631828\n7   chromedriver                        0x0000000102fc0188 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 315092\n8   chromedriver                        0x0000000103426c54 cxxbridge1$str$ptr + 2635268\n9   chromedriver                        0x0000000103429e6c cxxbridge1$str$ptr + 2648092\n10  chromedriver                        0x00000001034085d4 cxxbridge1$str$ptr + 2510724\n11  chromedriver                        0x000000010342a718 cxxbridge1$str$ptr + 2650312\n12  chromedriver                        0x00000001033f9d7c cxxbridge1$str$ptr + 2451244\n13  chromedriver                        0x0000000103449dd4 cxxbridge1$str$ptr + 2779012\n14  chromedriver                        0x0000000103449f54 cxxbridge1$str$ptr + 2779396\n15  chromedriver                        0x000000010345adec cxxbridge1$str$ptr + 2848668\n16  libsystem_pthread.dylib             0x000000018e05fc0c _pthread_start + 136\n17  libsystem_pthread.dylib             0x000000018e05ab80 thread_start + 8", "trace": "self = <tests.test_inventory.TestInventory object at 0x107bcb580>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"053cf142e186b1b0d11a2d2b326f99db\")>\nusername = 'standard_user', password = 'secret_sauce'\n\n    @pytest.mark.order(2)\n    @pytest.mark.parametrize(\"username,password\", get_users_from_db(valid=True))\n    def test_inventory(self,setup, username, password):\n        url = ReadConfig().get_application_url()\n        driver = setup\n        driver.get(url)\n    \n        lp = SauceDemoLoginPage(driver)\n        lp.login(username, password)\n        ip = SauceDemooInventoryPage(driver)\n        addtocart = AddToCartPage(driver)\n        checkout_page = CheckoutPage(driver)\n        ip.inventory()\n        addtocart.add_to_cart()\n        addtocart.get_product_list()\n        addtocart.verify_added_items_matches_db_data()\n>       checkout_page.complete_checkout()\n\ntests/test_inventory.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/checkout.py:39: in complete_checkout\n    raise e\npages/checkout.py:24: in complete_checkout\n    enter_first_name.send_keys(first_name)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:304: in send_keys\n    self._execute(\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107c0d930>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...00018e05fc0c _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x000000018e05ab80 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementnotinteractableexception\nE       Stacktrace:\nE       0   chromedriver                        0x0000000103463274 cxxbridge1$str$ptr + 2882596\nE       1   chromedriver                        0x000000010345b1a0 cxxbridge1$str$ptr + 2849616\nE       2   chromedriver                        0x0000000102f84ff4 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 73024\nE       3   chromedriver                        0x0000000102fc7104 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 343632\nE       4   chromedriver                        0x0000000102fc5b44 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 338064\nE       5   chromedriver                        0x0000000102fc1d68 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 322228\nE       6   chromedriver                        0x000000010300d6c8 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 631828\nE       7   chromedriver                        0x0000000102fc0188 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 315092\nE       8   chromedriver                        0x0000000103426c54 cxxbridge1$str$ptr + 2635268\nE       9   chromedriver                        0x0000000103429e6c cxxbridge1$str$ptr + 2648092\nE       10  chromedriver                        0x00000001034085d4 cxxbridge1$str$ptr + 2510724\nE       11  chromedriver                        0x000000010342a718 cxxbridge1$str$ptr + 2650312\nE       12  chromedriver                        0x00000001033f9d7c cxxbridge1$str$ptr + 2451244\nE       13  chromedriver                        0x0000000103449dd4 cxxbridge1$str$ptr + 2779012\nE       14  chromedriver                        0x0000000103449f54 cxxbridge1$str$ptr + 2779396\nE       15  chromedriver                        0x000000010345adec cxxbridge1$str$ptr + 2848668\nE       16  libsystem_pthread.dylib             0x000000018e05fc0c _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x000000018e05ab80 thread_start + 8\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementNotInteractableException"}, "attachments": [{"name": "test_inventory[standard_user-secret_sauce]_failed", "source": "b05c72f8-cab0-45cb-b84a-67bbbc82a028-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "3f18c860-a8e7-48c3-afc8-d4634d0381a8-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "'standard_user'"}, {"name": "password", "value": "'secret_sauce'"}], "start": 1759056845164, "stop": 1759056871107, "uuid": "7b752689-7081-43d8-93dd-6a1ad2a19022", "historyId": "62fa263865ae8dd91900c6bfb298c8ba", "testCaseId": "5ded2cb67f9901e2a29cd7d0e8f1302d", "fullName": "tests.test_inventory.TestInventory#test_inventory", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_inventory"}, {"name": "subSuite", "value": "TestInventory"}, {"name": "host", "value": "Ujjawals-MacBook-Air.local"}, {"name": "thread", "value": "86156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_inventory"}], "titlePath": ["tests", "test_inventory.py", "TestInventory"]}